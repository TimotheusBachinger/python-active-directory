#
# This file is part of FreeADI. FreeADI is free software that is made
# available under the MIT license. Consult the file "LICENSE" that is
# distributed together with this file for the exact licensing terms.
#
# FreeADI is copyright (c) 2007 by the FreeADI authors. See the file
# "AUTHORS" for a complete overview.

import re
import time
import socket

from freeadi.config.exception import ConfigWriteError
from freeadi.config.writer import Writer
from freeadi.config.parse_ldap import LdapParser


class LdapWriter(Writer):
    """Writer for nss_ldap/OpenLDAP ldap.conf."""

    re_key = re.compile('^[a-zA-Z_]+$')
    re_value = re.compile('^[a-zA-Z0-9_:./-](|[^#\n]*[^ \t\n#])$')

    def _write_header(self, fout):
        fout.write('# ldap.conf generated by FreeADI at %s on %s\n' \
                   % (time.asctime(), socket.gethostname()))
        fout.write('# You may edit this file, but the following will be lost:\n')
        fout.write('# - changes incompatible with FreeADI\n')
        fout.write('# - whitespace, comment and non-relevant ordering changes\n')

    def _write_assignment(self, key, value, fout):
        fout.write('%s %s\n' % (key, value))

    def _check_input(self, data):
        for key in data:
            if not self.re_key.match(key):
                raise ConfigWriteError, 'Illegal key name: %s' % key
            value = data[key]
            if isinstance(value, basestring):
                if not self.re_value.match(value):
                    raise ConfigWriteError, 'Illegal key value: %s' % value
            elif isinstance(value, list):
                for val in value:
                    if not self.re_value.match(val):
                        raise ConfigWriteError, 'Illegal key value: %s' % value

    def write(self, data, fout):
        """Write ldap.conf `data' to stream `fout'."""
        self._check_input(data)
        self._write_header(fout)
        for key in data:
            value = data[key]
            if isinstance(value, basestring):
                self._write_assignment(key, value, fout)
            elif isinstance(value, list):
                for val in value:
                    self._write_assignment(key, val, fout)
